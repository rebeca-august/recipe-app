{"version":3,"sources":["components/Recipe.module.css","components/Header.module.css","assets/heart.png","App.module.css","components/Recipe.js","components/Header.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Recipe","title","image","ingredients","toggleFavorite","bookmarked","className","styles","recipe","recipeImage","src","alt","map","ingredient","i","key","text","heart","active","onClick","Header","getSearch","search","updateSearch","isLoading","showFavorite","toggleFavoriteList","container","onSubmit","searchForm","searchBar","value","onChange","required","searchButton","disabled","getFavoriteRecipes","JSON","parse","localStorage","getItem","App","useState","recipes","setRecipes","setIsLoading","setSearch","query","setQuery","setShowFavorite","useEffect","a","fetch","response","json","data","favRecipes","recipesData","hits","recipeData","find","favRecipe","label","getRecipes","updatedRecipes","newRecipes","favoriteRecipes","filter","setItem","stringify","updateLocalStorage","filteredRecipes","app","e","preventDefault","trim","target","prevState","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.afa51587.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"recipe\":\"Recipe_recipe__2P_tg\",\"title\":\"Recipe_title__3TYhV\",\"ingredients\":\"Recipe_ingredients__2z17k\",\"recipeImage\":\"Recipe_recipeImage__3Q-qD\",\"heart\":\"Recipe_heart__2mgzo\",\"active\":\"Recipe_active__2DwzW\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Header_container__X8QFV\",\"searchForm\":\"Header_searchForm__3SEzw\",\"searchBar\":\"Header_searchBar__Ro_P3\",\"searchButton\":\"Header_searchButton__1tKlP\",\"heart\":\"Header_heart__2IgH5\",\"active\":\"Header_active__3o_R9\"};","module.exports = __webpack_public_path__ + \"static/media/heart.2138dcd2.png\";","// extracted by mini-css-extract-plugin\nmodule.exports = {\"app\":\"App_app__1kX79\",\"recipes\":\"App_recipes__2FN1G\"};","import React from \"react\";\nimport styles from \"./Recipe.module.css\";\nimport heart from \"../assets/heart.png\";\n\nconst Recipe = ({ title, image, ingredients, toggleFavorite, bookmarked }) => {\n    const handleFavorite = () => {\n        toggleFavorite(title);\n    };\n\n    return (\n        <div className={styles.recipe}>\n            <h1 className={styles.title}>{title}</h1>\n            <img className={styles.recipeImage} src={image} alt=\"\" />\n            <ul className={styles.ingredients}>\n                {ingredients.map((ingredient, i) => (\n                    <li key={i}>{ingredient.text}</li>\n                ))}\n            </ul>\n            <img className={`${styles.heart} ${bookmarked ? styles.active : ''}`} src={heart} alt=\"heart\" onClick={handleFavorite} />\n        </div>\n    );\n};\n\nexport default Recipe;\n","import React from \"react\";\nimport heart from \"../assets/heart.png\";\n\nimport styles from \"./Header.module.css\";\n\nconst Header = ({\n  getSearch,\n  search,\n  updateSearch,\n  isLoading,\n  showFavorite,\n  toggleFavoriteList,\n}) => {\n  return (\n    <div className={styles.container}>\n      <img\n        className={`${styles.heart} ${showFavorite ? styles.active : \"\"}`}\n        src={heart}\n        alt=\"\"\n        onClick={toggleFavoriteList}\n      />\n      <form onSubmit={getSearch} className={styles.searchForm}>\n        <input\n          className={styles.searchBar}\n          value={search}\n          onChange={updateSearch}\n          required\n        />\n        <button className={styles.searchButton} disabled={isLoading}>\n          {isLoading ? \"Loading...\" : \"Search\"}\n        </button>\n      </form>\n    </div>\n  );\n};\n\nexport default Header;\n","import React, { useState, useEffect } from \"react\";\nimport Recipe from \"./components/Recipe\";\nimport Header from \"./components/Header\";\n\nimport styles from \"./App.module.css\";\n\nconst getFavoriteRecipes = () =>\n  JSON.parse(localStorage.getItem(\"favoriteRecipes\")) || [];\n\nfunction App() {\n  const APP_ID = \"22961b0c\";\n  const APP_KEY = \"267a8479f969f9b1474fec115bfd119c\";\n\n  const [recipes, setRecipes] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [search, setSearch] = useState(\"\");\n  const [query, setQuery] = useState(\"choco\");\n  const [showFavorite, setShowFavorite] = useState(false);\n\n  const updateSearch = (e) => {\n    setSearch(e.target.value);\n  };\n\n  const getSearch = (e) => {\n    e.preventDefault();\n    setQuery(search.trim());\n  };\n\n  useEffect(() => {\n    const getRecipes = async () => {\n      setIsLoading(true);\n      const response = await fetch(\n        `https://api.edamam.com/search?q=${query}&app_id=${APP_ID}&app_key=${APP_KEY}`\n      );\n      const data = await response.json();\n      const favRecipes = getFavoriteRecipes();\n      const recipesData = data.hits.map((recipeData) => {\n        const hasFavRecipe = favRecipes.find(\n          (favRecipe) => favRecipe.recipe.label === recipeData.recipe.label\n        );\n        if (hasFavRecipe) {\n          return { ...recipeData, bookmarked: true };\n        }\n        return recipeData;\n      });\n\n      setRecipes(recipesData);\n      setIsLoading(false);\n    };\n    if (query) {\n      getRecipes();\n    }\n  }, [query]);\n  const updateLocalStorage = (newRecipes) => {\n    const favoriteRecipes = newRecipes.filter((recipe) => recipe.bookmarked);\n    localStorage.setItem(\"favoriteRecipes\", JSON.stringify(favoriteRecipes));\n  };\n\n  const toggleFavorite = (title) => {\n    const updatedRecipes = recipes.map((data) => {\n      if (data.recipe.label === title) {\n        return { ...data, bookmarked: !data.bookmarked };\n      }\n      return data;\n    });\n    setRecipes(updatedRecipes);\n    updateLocalStorage(updatedRecipes);\n  };\n\n  const toggleFavoriteList = () => {\n    setShowFavorite((prevState) => !prevState);\n  };\n\n  const filteredRecipes = showFavorite ? getFavoriteRecipes() : recipes;\n\n  return (\n    <div className={styles.app}>\n      <Header\n        getSearch={getSearch}\n        search={search}\n        updateSearch={updateSearch}\n        isLoading={isLoading}\n        toggleFavoriteList={toggleFavoriteList}\n        showFavorite={showFavorite}\n      />\n      <div className={styles.recipes}>\n        {filteredRecipes.map((data) => (\n          <Recipe\n            toggleFavorite={toggleFavorite}\n            key={data.recipe.label}\n            title={data.recipe.label}\n            ingredients={data.recipe.ingredients}\n            image={data.recipe.image}\n            bookmarked={data.bookmarked}\n          />\n        ))}\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}